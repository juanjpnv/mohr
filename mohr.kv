# Aqui esta a tela principal, onde fica organizada as outras telas
# -*- coding: utf-8 -*-
#:import MeshLinePlot kivy.garden.graph.MeshLinePlot
#=========================TELA PRINCIPAL===============================
<Principal>
    #Cor de fundo - Background Color
    canvas.before:
        Color:
            rgba: 0,0,0,1
        Rectangle:
            # o 'self' abaixo se refere a 'CalculadoraDeMohr'
            pos: self.pos
            size: self.size
    #Fim da cor de fundo
    TelaInicial:
        name: 'TelaInicial'
    TelaDoPlano:
        name: 'TelaDoPlano'
    TelaDoPlanoDeformacao
        name: 'TelaDoPlanoDeformacao'
    TelaTensaoTri:
        name: 'TelaTensaoTri'
#============================ TELA INICIO =============================
<TelaInicial@Screen>
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: 'Análise de tensão deformação'
        BoxLayout:
            orientation: 'vertical'
            Button:
                on_release: root.manager.current = 'TelaDoPlano'
                text: 'Estado Plano de Tensão'
            Button:
                text: 'Estado Plano de Deformação'
                on_release: root.manager.current = 'TelaDoPlanoDeformacao'
            Button:
                text: 'Estado Triaxial de Tensão'
                on_release: root.manager.current = 'TelaTensaoTri'

#=========================== TELA DO PLANO ============================
<TelaDoPlano>
    BoxLayout:
        orientation: 'vertical'
        ActionBar:
            ActionView:
                ActionPrevious:
                    title: 'Plano de Tens\u00e3o'
                    on_release: root.manager.current = 'TelaInicial'
                ActionButton:
                    text: '\ufffd'
                    font_size: self.height
        ScrollView:
            id: rolagem_TelaDoPlano
            BoxLayout:
                orientation:'vertical'
                size_hint: 1, 1.5
                InserirValores
                    id: inserirvalor
                    size_hint: 1, 0.5
                SaidaValores
                    id: saidavalor
                WidgetGrafico:
                    id: grafico_tensao_2d
                    size_hint: 1, 1.3

# ----------------------------------------------------------------------------------
# Aqui fica a tela onde o usuário irá inserir os valores de entrada do estado plano
# Here the user insert the enter values
<InserirValores>
    cols: 2
    Label:
        id: label_tensaoX
        text: 'σX'
    TextInput:
        id: entrada_tensaoX
        text: ''
        multiline: False
        write_tab: False
    Label:
        id: label_tensaoY
        text: 'σY'
    TextInput:
        id: entrada_tensaoY
        text: ''
        multiline: False
        write_tab: False
    Label:
        id: label_cisalhante
        text: 'τ'
    TextInput:
        id: entrada_cisalhante
        text: ''
        multiline: False
        write_tab: False

    Button:
        id: botao_calcular
        text: 'Calcular'
        on_press: root.calcular(); app.root.get_screen('TelaDoPlano').ids.saidavalor.imprimir_tensoes(*root.saida);
        on_release: app.root.get_screen('TelaDoPlano').ids.saidavalor.ids.elementoMTP.muda_angulo(root.saida[3]);
        on_release: app.root.get_screen('TelaDoPlano').ids.saidavalor.ids.elementoMCP.muda_angulo(root.saida[5]);
        on_release: app.root.get_screen('TelaDoPlano').ids.grafico_tensao_2d.grafico_2d(*root.grafico)
    Button:
        id: botao_limpar
        text: 'Limpar'
        on_press: root.limpa(); app.root.get_screen('TelaDoPlano').ids.saidavalor.imprimir_tensoes(*root.saida)
        on_release: app.root.get_screen('TelaDoPlano').ids.saidavalor.ids.elementoMTP.muda_angulo(0.0);
        on_release: app.root.get_screen('TelaDoPlano').ids.saidavalor.ids.elementoMCP.muda_angulo(0.0);
        on_release: app.root.get_screen('TelaDoPlano').ids.grafico_tensao_2d.grafico_2d(*root.grafico)

# ----------------------------------------------------------------------------------
# Aqui será mostrado o resultado.
<SaidaValores>
    cols: 2
    Label:  # Label de tensão principal
        text: 'Tensões Principais'
        size_hint: 1, 2/7
    Label:  # Label de cisalhamento principal
        text: 'Plano de Cisalhamento Máximo'
        size_hint: 1, 2/7

    GridLayout:
        cols: 2
        Label:
            text: u'\u03C31' # sigma 1 | tensao 1
        Label:
            id: resultado_x
            text: '- MPa'
            halign: 'right'
        Label:
            text: u'\u03C32' # sigma 2 | tensao 2
        Label:
            id: resultado_y
            text: '- MPa'
            halign: 'right'
        Label:
            text: u'\u03B81' # theta 1 | angulo 1
            color: 1,1,0,1
        Label:
            id: resultado_angulo
            text: u'- \u00B0' # º
            color: 1,1,0,1
            halign: 'right'
        Label:
            text: u'\u03B82' # theta 2 | angulo 2
        Label:
            id: resultado_angulo2
            text: u'- \u00B0' # º
            halign: 'right'

    GridLayout:
        cols: 2
        Label:
            text: u'\u03C4max'
        Label:
            id: resultado_cisalhante
            text: '- MPa'
            halign: 'right'
        Label:
            text: u'\u03B8s'
        Label:
            id: resultado_angulo3
            text: u'- \u00B0'
            halign: 'right'
        Label:
            text: u'\u03C3med' # sigma med | tensao media
        Label:
            id: resultado_med
            text: '- MPa'
            halign: 'right'

    Elemento:  # Quadrado que gira (tensao principal)
        source: 'Imagens/EstadoPlano.png'
        id: elementoMTP # elementoMTP: Elemento de Maxima Tensao Plana
    Elemento:  # Quadrado que gira (cisalhamento principal)
        source: 'Imagens/EstadoPlano.png'
        id: elementoMCP # elementoMTP: Elemento de Maxima Cisalhamento Plano

#==================== TELA DO PLANO DE DEFORMAÇÃO =====================
<TelaDoPlanoDeformacao>
    BoxLayout:
        orientation: 'vertical'
        ActionBar:
            ActionView:
                ActionPrevious:
                    title: 'Estado Plano de Deformação'
                    on_release: root.manager.current = 'TelaInicial'
        ScrollView:
            BoxLayout:
                orientation: 'vertical'
                size_hint: 1, 1.5
                EntradaPlanoDeformacao:
                    size_hint: 1, 0.5
                    id: entrada_plano_deformacao
                SaidaPlanoDeformacao:
                    id: saida_plano_deformacao
                WidgetGrafico:
                    size_hint: 1, 1.3
                    id: grafico_deforma

# ----------------------------------------------------------------------------------
<EntradaPlanoDeformacao>
    cols: 2
    Label:
        text: '\u03b5xx' # epsilon x
        id: label_ex
    TextInput:
        id: input_ex
        text: ''
        multiline: False
        write_tab: False
    Label:
        text: '\u03b5yy' # epsilon y
        id: label_ey
    TextInput:
        id: input_ey
        text: ''
        multiline: False
        write_tab: False
    Label:
        text: '\u03b3yx' # gama xy
        id: label_gamaxy
    TextInput:
        id: input_gamaxy
        text: ''
        multiline: False
        write_tab: False

    Button:
        text: 'Calcular'
        on_press: root.calcular(); app.root.get_screen('TelaDoPlanoDeformacao').ids.grafico_deforma.grafico_2d(*root.grafico)
        on_release: app.root.get_screen('TelaDoPlanoDeformacao').ids.saida_plano_deformacao.valores(root.saida)
        on_release: app.root.get_screen('TelaDoPlanoDeformacao').ids.saida_plano_deformacao.ids.elementoMEP.muda_angulo(root.saida[4])
        on_release: app.root.get_screen('TelaDoPlanoDeformacao').ids.saida_plano_deformacao.ids.elementoMDP.muda_angulo(root.saida[6])
    Button:
        text: 'Limpar'
        on_press: root.limpar()
        on_press: app.root.get_screen('TelaDoPlanoDeformacao').ids.grafico_deforma.grafico_2d(0,0,0,0,0)
        on_press: app.root.get_screen('TelaDoPlanoDeformacao').ids.saida_plano_deformacao.valores(['']*7)
        on_release: app.root.get_screen('TelaDoPlanoDeformacao').ids.saida_plano_deformacao.ids.elementoMEP.muda_angulo(0.0)
        on_release: app.root.get_screen('TelaDoPlanoDeformacao').ids.saida_plano_deformacao.ids.elementoMDP.muda_angulo(0.0)

#------------------------------------------------------------------------------------
<SaidaPlanoDeformacao>
    cols: 2
    Label:
        text: 'Deformações Principais'
        size_hint: 1, 2/7
    Label:
        text: 'Distorção principal'
        size_hint: 1, 2/7

    GridLayout:
        cols: 2
        Label:
            text: '\u03b51' # epsilon 1
        Label:
            text: '' # resultado epsilon 1
            id: label_result_e1
        Label:
            text: '\u03b11' # alpha 1
        Label:
            text: '' # resultado alpha 1
            id: label_result_alpha1
        Label:
            text: '\u03b52' # epsilon 2
        Label:
            text: '' # resultado epsilon 2
            id: label_result_e2
        Label:
            text: '\u03b12' # alpha 2
        Label:
            text: '' # resultado alpha 2
            id: label_result_alpha2
    GridLayout:
        cols: 2
        Label:
            text: '\u03b3max' # gama max
        Label:
            text: '' # resultado gama max
            id: label_result_gamamax
        Label:
            text: '\u03b5med' # epsilon med
        Label:
            text: '' # resultado epsilon med
            id: label_result_emed
        Label:
            text: '\u03b1\u03b3' # alpha gama
        Label:
            text: '' # resultado alpha gama
            id: label_result_alphagama

    Elemento:  # Quadrado que gira (tensao principal)
        source: 'Imagens/EstadoPlano.png'
        id: elementoMEP # elementoMEP: Elemento de Maxima Epsilon Plano
    Elemento:  # Quadrado que gira (cisalhamento principal)
        source: 'Imagens/EstadoPlano.png'
        id: elementoMDP # elementoMDP: Elemento de Maxima Distorçao Plana

#======================== TELA TENSÃO TRIAXIAL ========================
<TelaTensaoTri>
    BoxLayout:
        orientation: 'vertical'
        ActionBar:
            ActionView:
                ActionPrevious:
                    title: 'Estado Triaxial de Tensão'
                    on_release: root.manager.current = 'TelaInicial'
        BoxLayout:
            size_hint_y: None
            height: 30*4
            orientation: 'horizontal'
            Label:
                size_hint_x: None
                width: 50
                text: '\u03C3 = '
            InserirTensaoTri:
                id: entrada_tensao_tri
        SaidaTensaoTri:
            id: saida_tensao_tri
        WidgetGrafico:
            id: grafico_tensao_3D
            size_hint: 1, 1.5


#------------------------------------------------------------------------------------
<InserirTensaoTri>
        #sx: Stress X - sy: Stress Y - sz: Stress Z
        #txy: Shear XY - tyx: Shear YZ - tzx: Shear ZX"""
    cols: 3
    TextInput:
        text: '\u03C3xx'
        multiline: False
        id: entrada_tensaoX
        write_tab: False
    TextInput:
        text: '\u03C4xy'
        multiline: False
        id: entrada_cisXY
        write_tab: False
    TextInput:
        text: '\u03C4xz'
        multiline: False
        id: entrada_cisXZ
        write_tab: False

    Label:
        text: root.ids.entrada_cisXY.text
    TextInput:
        text: '\u03C3yy'
        multiline: False
        write_tab: False
        id: entrada_tensaoY
    TextInput:
        text: '\u03C4yz'
        multiline: False
        write_tab: False
        id: entrada_cisYZ

    Label:
        text: root.ids.entrada_cisXZ.text
    Label:
        text: root.ids.entrada_cisYZ.text
    TextInput:
        text: '\u03C3zz'
        multiline: False
        write_tab: False
        id: entrada_tensaoZ

    Button:
        text: 'Calcular'
        on_press: root.calcular()
        on_release: app.root.get_screen('TelaTensaoTri').ids.saida_tensao_tri.imprime_principais(*root.saida)
        on_release: app.root.get_screen('TelaTensaoTri').ids.grafico_tensao_3D.grafico_3d(*root.grafico)
    Button:
        text: 'Limpar'
        on_release: root.limpar()
        on_release: app.root.get_screen('TelaTensaoTri').ids.grafico_tensao_3D.grafico_3d(0,0,0,0,0,0)
        on_press: app.root.get_screen('TelaTensaoTri').ids.saida_tensao_tri.imprime_principais('0','0','0','0','0','0')

#------------------------------------------------------------------------------------
<SaidaTensaoTri>
    cols: 1
    BoxLayout:
        id: caixa_resposta_triaxial
        orientation: 'horizontal'
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: '\u03C31'
                id: label_result_s1
            Label:
                text: '\u03C32'
                id: label_result_s2
            Label:
                text: '\u03C33'
                id: label_result_s3
        BoxLayout:
            orientation: 'vertical'
            Label:
                text: '\u03C413'
                id: label_result_t13
            Label:
                text: '\u03C412'
                id: label_result_t12
            Label:
                text: '\u03C423'
                id: label_result_t23

#=========================== OUTROS WIDGETS============================
<Elemento@Plano>
    #imagem do Plano De Saida -> imagem_pds
    canvas.before:
        PushMatrix
        Rotate:
            angle: root.angle
            origin: self.center
    canvas.after:
        PopMatrix
        Color:
            rgba: 1,1,0,1
            # Desenhar os eixos coordenados
        Color:
            rgba: 1,1,1,1
        Line:
            bezier: (*self.center, self.center_x, self.center_y+0.45*self.height)
        Line:
            bezier: (*self.center, self.center_x+0.45*self.height, self.center_y)
            # Desenho dos angulos.
        Color:
            rgba: 1,1,0,1
        Line:                               #Começa em "90" e vai até "-root.angle+90" negativo pra girar em sentido antihorário e +90 pra compensar o ponto de inicio
            circle: (*self.center, 0.2*self.height, 90, -root.angle+90) #desenha angulo principal 1.
